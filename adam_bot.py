# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram import F
from structure import quiz_data
from parameters import IDENTIFIER
from database import create_table, update_quiz_index, get_quiz_index, save_results, get_user_statistics

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=IDENTIFIER)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

user_results = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏

def generate_options_keyboard(answer_options, right_answer):
    builder = InlineKeyboardBuilder()
    for index, option in enumerate(answer_options):
        builder.add(types.InlineKeyboardButton(
            text=option,
            callback_data=f"{index}_{'right' if option == right_answer else 'wrong'}"
        ))
    builder.adjust(1)
    return builder.as_markup()

@dp.callback_query(lambda c: True)
async def process_answer_callback(callback: types.CallbackQuery):
    button_index, answer_status = callback.data.split('_')
    button_index = int(button_index)

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–≤–µ—Ç–∞
    await callback.bot.edit_message_reply_markup(
        chat_id=callback.from_user.id,
        message_id=callback.message.message_id,
        reply_markup=None
    )
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(callback.from_user.id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
    current_question = quiz_data[current_question_index]
    correct_option = current_question['correct_option']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
    if callback.from_user.id not in user_results:
        user_results[callback.from_user.id] = {'correct': 0, 'wrong': 0}

    if answer_status == 'right':
        user_results[callback.from_user.id]['correct'] += 1
        await callback.message.answer(f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {current_question['options'][correct_option]}\n"
                                      f"–ò –≤—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤–µ—Ä–Ω–æ ü§©")
    else:
        user_results[callback.from_user.id]['wrong'] += 1
        response_message = (
            f"–í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏: {current_question['options'][button_index]}\n"
            f"–ò –≤—ã –æ—à–∏–±–ª–∏—Å—å üòû\n\n"
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['options'][correct_option]}"
        )
        await callback.message.answer(response_message)

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    current_question_index += 1
    await update_quiz_index(callback.from_user.id, current_question_index)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –∫–æ–Ω–µ—Ü –∫–≤–∏–∑–∞
    if current_question_index < len(quiz_data):
        await get_question(callback.message, callback.from_user.id)
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∫–≤–∏–∑–∞
        await callback.message.answer(f"–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.\n"
                                      f"–ó–∞—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ, –±—ã—Ç—å –º–æ–∂–µ—Ç —è –Ω–∞–π–¥—É —á–µ–º –≤–∞—Å –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å.\n"
                                      f"–ê —Å–µ–π—á–∞—Å - –ø–æ—Ä–∞ –æ—Ç–¥—ã—Ö–∞—Ç—å!")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

        await save_results(callback.from_user.id, user_results[callback.from_user.id]['correct'], user_results[callback.from_user.id]['wrong'])

        correct_count = user_results[callback.from_user.id]['correct']
        wrong_count = user_results[callback.from_user.id]['wrong']
        await callback.message.answer(f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n"
                                      f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - {correct_count};\n"
                                      f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - {wrong_count}.")
        del user_results[callback.from_user.id]

@dp.message(F.text=="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–ª–∏–∂–Ω–∏—Ö")
@dp.message(Command("stats"))
async def show_statistics(message: types.Message):
    all_statistics = await get_user_statistics()

    if all_statistics:
        response_message = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—É—Ç–Ω–∏–∫–æ–≤:\n\n"
        for user_id, correct, wrong in all_statistics:
            response_message += (f"–ü—É—Ç–Ω–∏–∫ {user_id}:\n"
                                 f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - {correct};\n"
                                 f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã - {wrong}.\n\n")
        
        await message.answer(response_message)
    else:
        await message.answer("–í –≠–¥–µ–º–µ –ø—É—Å—Ç–æ üò¢")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="¬´–ü–æ–µ—Ö–∞–ª–∏!¬ª"))
    builder.add(types.KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–ª–∏–∂–Ω–∏—Ö"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=builder.as_markup(resize_keyboard=True))


async def get_question(message, user_id):

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_question_index = await get_quiz_index(user_id)
    correct_index = quiz_data[current_question_index]['correct_option']
    opts = quiz_data[current_question_index]['options']
    kb = generate_options_keyboard(opts, opts[correct_index])
    await message.answer(f"{quiz_data[current_question_index]['question']}", reply_markup=kb)


async def new_quiz(message):
    user_id = message.from_user.id
    current_question_index = 0
    await update_quiz_index(user_id, current_question_index)
    await get_question(message, user_id)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quiz
@dp.message(F.text=="¬´–ü–æ–µ—Ö–∞–ª–∏!¬ª")
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):

    await message.answer(f"–ò—Ç–∞–∫, –Ω–∞—á–Ω—ë–º!")
    await new_quiz(message)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await create_table()

    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())